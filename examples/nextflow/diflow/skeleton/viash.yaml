functionality:
  name: "skeleton"
  namespace: "diflow"
  resources:
  - type: "bash_script"
    name: "skeleton"
    text: |
      #!/usr/bin/env bash
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      function ViashSetup {
      :
      }
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
         echo "Skeleton component / module"
         echo
         echo "Options:"
          echo "    --input=file"
          echo "        type: file, required parameter"
          echo "        Input file"
          echo ""
          echo "    --output=file"
          echo "        type: file, required parameter"
          echo "        Output file"
          echo ""
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit;;
              ---setup)
                  ViashSetup
                  exit 0
                  ;;
              --input)
                  VIASH_PAR_INPUT="$2"
                  shift 2
                  ;;
              --input=*)
                  VIASH_PAR_INPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              *)    # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_INPUT" ]; then
        echo '--input' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        echo '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      
      cat << VIASHEOF | bash 
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-skeleton-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      trap clean_up EXIT
      cat > "\$tempscript" << 'VIASHMAIN'
      # The following code has been auto-generated by Viash.
      par_input='$VIASH_PAR_INPUT'
      par_output='$VIASH_PAR_OUTPUT'
      
      resources_dir="$VIASH_RESOURCES_DIR"
      
      #!/bin/bash
      
      # VIASH START
      # VIASH END
      
      cat \$par_input | sed 's/input/output/' > \$par_output
      VIASHMAIN
      bash "\$tempscript"
      
      VIASHEOF
      

    is_executable: true
  - type: "file"
    name: "nextflow.config"
    text: |
      docker.enabled = true
      process.container = "dataintuitive/portash"
      params {
        skeleton__input = "value_not_found"
        skeleton__output = "value_not_found"
        id = ""
        dockerPrefix = ""
        input = ""
        output = ""
        skeleton {
          name = "skeleton"
          container = "dataintuitive/viash:latest"
          command = "skeleton"
          arguments {
            input {
              name = "input"
              otype = "--"
              description = "Input file"
              required = true
              type = "file"
              direction = "Input"
              multiple = false
              multiple_sep = ":"
            }
            output {
              name = "output"
              otype = "--"
              description = "Output file"
              required = true
              type = "file"
              direction = "Output"
              multiple = false
              multiple_sep = ":"
            }
          }
        }
      }

    is_executable: false
  - type: "file"
    name: "main.nf"
    text: |
      nextflow.preview.dsl=2
      import java.nio.file.Paths
      if (!params.containsKey("input") || params.input == "") {
          exit 1, "ERROR: Please provide a --input parameter containing an input file/dir or a wildcard expression"
      }
      if (!params.containsKey("output") || params.output == "" ) {
          exit 1, "ERROR: Please provide a --output parameter for storing the output"
      }
      
      def renderCLI(command, arguments) {
      
          def argumentsList = arguments.collect{ it ->
              (it.otype == "")
                  ? "\'" + it.value + "\'"
                  : (it.type == "boolean_true")
                      ? it.otype + it.name
                      : (it.value == "")
                          ? ""
                          : it.otype + it.name + " \'" + ((it.value in List && it.multiple) ? it.value.join(it.multiple_sep): it.value) + "\'"
          }
      
          def command_line = command + argumentsList
      
          return command_line.join(" ")
      }
      
      // files is either String, List[String] or HashMap[String,String]
      def outFromIn(files) {
          if (files in List || files in HashMap) {
              // We're in join mode, files is List[String]
              return "skeleton" + "." + extension
          } else {
              // files filename is just a String
              def splitString = files.split(/\./)
              def prefix = splitString.head()
              def extension = splitString.last()
              return prefix + "." + "skeleton" + "." + extension
          }
      }
      
      // In: Hashmap key -> DataObjects
      // Out: Arrays of DataObjects
      def overrideInput(params, str) {
      
          // `str` in fact can be one of:
          // - `String`, 
          // - `List[String]`,
          // - `Map[String, String | List[String]]`
          // Please refer to the docs for more info
          def overrideArgs = params.arguments.collect{ it ->
            (it.value.direction == "Input" && it.value.type == "file")
              ? (str in List || str in HashMap)
                  ? (str in List)
                      ? it.value + [ "value" : str.join(it.value.multiple_sep)]
                      : (str[it.value.name] != null)
                          ? (str[it.value.name] in List)
                              ? it.value + [ "value" : str[it.value.name].join(it.value.multiple_sep)]
                              : it.value + [ "value" : str[it.value.name]]
                          : it.value + [ "value" : "PROBLEMS" ]
                  : it.value + [ "value" : str ]
              : it.value
          }
      
          def newParams = params + [ "arguments" : overrideArgs ]
      
          return newParams
      }
      
      def overrideOutput(params, str) {
      
          def update = [ "value" : str ]
      
          def overrideArgs = params.arguments.collect{it ->
            (it.direction == "Output" && it.type == "file")
              ? it + update
              : it
          }
      
          def newParams = params + [ "arguments" : overrideArgs ]
      
          return newParams
      }
      
      
      process executor {
        
        tag "${id}"
        echo { (params.debug == true) ? true : false }
        cache 'deep'
        stageInMode "symlink"
        container "${params.dockerPrefix}${container}"
        
        input:
          tuple val(id), path(input), val(output), val(container), val(cli)
        output:
          tuple val("${id}"), path("${output}")
        script:
          """
          # Running the pre-hook when necessary
          echo Nothing before
          # Adding NXF's `$moduleDir` to the path in order to resolve our own wrappers
          export PATH="${moduleDir}:\$PATH"
          # Echo what will be run, handy when looking at the .command.log file
          echo Running: $cli
          # Actually run the command
          $cli
          """
      
      }
      
      workflow skeleton {
      
          take:
          id_input_params_
      
          main:
      
          def key = "skeleton"
      
          def id_input_output_function_cli_ =
              id_input_params_.map{ id, input, _params ->
                  // TODO: make sure input is List[Path], HashMap[String,Path] or Path, otherwise convert
                  // NXF knows how to deal with an List[Path], not with HashMap !
                  def checkedInput =
                      (input in HashMap)
                          ? input.collect{ k, v -> v }.flatten()
                          : input
                  // filename is either String, List[String] or HashMap[String, String]
                  def filename =
                      (input in List || input in HashMap)
                          ? (input in List)
                              ? input.collect{ it.name }
                              : input.collectEntries{ k, v -> [ k, (v in List) ? v.collect{it.name} : v.name ] }
                          : input.name
                  def defaultParams = params[key] ? params[key] : [:]
                  def overrideParams = _params[key] ? _params[key] : [:]
                  def updtParams = defaultParams + overrideParams
                  // now, switch to arrays instead of hashes...
                  def outputFilename = outFromIn(filename)
                  def updtParams1 = overrideInput(updtParams, filename)
                  def updtParams2 = overrideOutput(updtParams1, outputFilename)
                  new Tuple5(
                      id,
                      checkedInput,
                      outputFilename,
                      updtParams2.container,
                      renderCLI([updtParams2.command], updtParams2.arguments)
                  )
              }
          result_ = executor(id_input_output_function_cli_) \
              | join(id_input_params_) \
              | map{ id, output, input, original_params ->
                  new Tuple3(id, output, original_params)
              }
      
          emit:
          result_
      
      }
      
      workflow {
      
         def id = params.id
         def inputPath = Paths.get(params.input)
         def ch_ = Channel.from(inputPath).map{ s -> new Tuple3(id, s, params)}
      
         skeleton(ch_)
      }
      

    is_executable: false
  description: "Skeleton component / module"
  arguments:
  - type: "file"
    name: "--input"
    alternatives: []
    description: "Input file"
    must_exist: false
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives: []
    description: "Output file"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  tests: []
platform:
  type: "nextflow"
  id: "nextflow"
  image: "dataintuitive/viash"
  setup: []
platforms: []
info:
  config: "src/skeleton/config.vsh.yaml"
  platform: "nextflow"
  output: "examples/nextflow/diflow/skeleton"
  executable: "examples/nextflow/diflow/skeleton/skeleton"
  viash_version: "0.2.2"
  git_commit: "1706222e92de38285305fbf5bd67a6d5703c99a1"
  git_remote: "https://github.com/data-intuitive/diflow.git"
